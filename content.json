{"pages":[{"title":"about","text":"大家好，我叫栗亚舟","link":"/about/index.html"}],"posts":[{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start#Create a new post#1$ hexo new &quot;My New Post&quot; More info: Writing Run server#1$ hexo server More info: Server Generate static files#1$ hexo generate More info: Generating Deploy to remote sites#1$ hexo deploy More info: Deployment","link":"/2020/10/02/hello-world/"},{"title":"spider_shell","text":"mainly bash syntax explanation use bash to write a shell code to get information about a douban user’s watched movies and listened music (moviename |area | class |rating ) (musicname |intro | rating) use bash movie.sh user_id to run the script complete script: 123456789101112131415161718192021222324252627cat /dev/null &gt; movietable # 清空文件movie_number=`curl -s https://movie.douban.com/people/$1/collect|egrep &quot;看过的电影&quot;|awk -F '(' '{print $2}' |awk -F ')' '{print $1}'|uniq`if (( movie_number &lt; 5 )); then exit 0fiuser_name=`curl -s https://movie.douban.com/people/$1/collect|egrep &quot;看过的电影&quot;|awk -F '看过的电影' '{print $1}'|awk -F '&gt;' '{print $2}'|tail -n1` # 等号赋值两边不能有空格for i in `seq 0 15 $movie_number`;do # 因为一页只显示15个 curl -s https://movie.douban.com/people/$1/collect?start=$i &gt; html echo `cat html |egrep 'a href=.* class=&quot;&quot;'| awk -F 'href=&quot;' '{print $2}' |awk -F '&quot;' '{print $1}'` &gt; movies for movie in `cat movies`;do cat html | egrep -A15 &quot;$movie&quot; &gt; test1 # 打印$movie所在行极其之后的15行 moviename=`cat test1 | egrep '&lt;em&gt;' | awk -F '&gt;' '{print $2}' | awk -F '&lt;' '{print $1}' | awk -F ' ' '{print $1}'` curl -L -s $movie &gt; tmp_html area=`cat tmp_html | egrep '制片国家/地区:' | awk -F '&lt;/span&gt;' '{print $2}' | awk -F '&lt;' '{print $1}' | sed &quot;s/ \\///g;&quot;` class=`cat tmp_html | grep -o 'genre&quot;&gt;..&lt;/span&gt;' | awk -F '&gt;' '{print $2}' | awk -F '&lt;' '{print $1}' | sed &quot;:a;N;s/\\n/ /g;ta&quot;` # grep -o 纸打印匹配部分 (默认打印匹配行) rating=`cat test1|egrep 'rating' |awk -F 'rating' '{print $2}' |awk -F '-' '{print $1}'` echo -e &quot;-- $moviename |$area | $class |$rating&quot; &gt;&gt; movietable done if ((i&gt;1)); then # 这个没空格也行？ break fi echo &quot;finish $((i+15)) movies&quot;done AWK 是一种处理文本文件的语言，是一个强大的文本分析工具。 12342 this is a test3 Are you like awkThis's a test10 There are orange,apple,mongo 12# 每行按空格或TAB分割，输出文本中的1、4项$ awk '{print $1,$4}' log.txt output:2 a3 likeThis’s10 orange,apple,mongo 12# 使用&quot;,&quot;分割$ awk -F, '{print $1,$2}' log.txt Uniq 删除重复行 seqseq 0 15 100 # 从0到100每隔15输出一个数 wget请求url返回正常，curl请求没有结果并返回301加上 -L 就正常了，因为-L参数接受重定向的结果 sed “:a;N;s/\\n/ /g;ta” 把文件的换行符换为空格 (s: 替换 g: 全局) if 语句 1234567if (( a &lt; b )); then exit 0fiif (( $a &lt; $b )); thenif [ $a -lt $b ]; then 好像都对 就是必须有空格（括号旁 运算符两边） —shell 语法成谜 &lt;&lt; EOF Shell中通常将EOF与 &lt;&lt; 结合使用，表示后续的输入作为子命令或子Shell的输入，直到遇到EOF为止，再返回到主调Shell。 可以把EOF替换成其他东西，意思是把内容当作标准输入传给程序。 &lt;&lt;: 当shell看到&lt;&lt;的时候，它就会知道下一个词是一个分界符。 123456mysql -uroot -p123456 &lt;&lt;EOFuse test;select * from testaa while a=10000; ###1000 not usr single quote mark,because a is int\\# type,only char type need single quote mark.exitEOF defaultdict的作用是在于，当字典里的key不存在但被查找时，返回的不是keyError而是一个默认值 self.movie_class_cnt = defaultdict(int) (默认是0)","link":"/2020/10/08/spider-shell/"},{"title":"music","text":"音乐信息 信号处理 DFT DFT泄露 加窗 FFT 音乐特征 MP3格式 各种音频处理库（如librosa, eye3D…）与他们的区别 spectrom 频域图 倒谱 各种特征 编码细节 深度学习知识点 softmax分类器 交叉熵函数？ Optimizer Loss function [toc] 音乐信息#信号处理#DFT#DFT泄露#加窗#FFT#音乐特征# MP3格式#Layer-3 音频文件，MPEG(Moving Picture Experts Group) 在汉语中译为活动图像专家组，特指活动影音压缩标准，MPEG音频文件是MPEG1 标准中的声音部分，也叫MPEG 音频层，它根据压缩质量和编码复杂程度划分为三层，即Layer-1、Layer2、Layer3，且分别对应MP1、MP2、MP3 这三种声音文件，并根据不同的用途，使用不同层次的编码。 MPEG 音频编码的层次越高，编码器越复杂，压缩率也越高. 不过MP3 对音频信号采用的是有损压缩方式，为了降低声音失真度，MP3采取了“感官编码技术”，即编码时先对音频文件进行频谱分析，然后用过滤器滤掉噪音电平，接着通过量化的方式将剩下的每一位打散排列，最后形成具有较高压缩比的MP3 文件，并使压缩后的文件在回放时能够达到比较接近原音源的声音效果。 各种音频处理库（如librosa, eye3D…）与他们的区别#https://python.libhunt.com/eyed3-alternatives spectrom 频域图#one axis represents time, and the other axis represents frequency; a third dimension indicating the amplitude of a particular frequency at a particular time is represented by the intensity or color of each point in the image. 横坐标时间，纵坐标频率，各个频率的强度用颜色表征 倒谱#倒谱（cepstrum）就是一种信号的傅里叶变换经对数运算后再进行傅里叶反变换得到的谱。 在Mel频谱上面获得的倒谱系数h[k]就称为Mel频率倒谱系数，简称MFCC。 The Mel Scale, mathematically speaking, is the result of some non-linear transformation of the frequency scale. The Mel Spectrogram is a normal Spectrogram, but with a Mel Scale on the y axis. 各种特征#过零率： 为什么？ 编码细节# Python路径处理, os, os.path, glob, pathlib F-string 字符串格式化 1234name = &quot;Tom&quot;age = 3f&quot;His name is {name}, he's {age} years old.&quot;&quot;His name is Tom, he's 3 years old.&quot; # LabelEncoder 是对不连续的数字或者文本进行编号 from sklearn.preprocessing import LabelEncoder le = LabelEncoder() le.fit([1,5,67,100]) le.transform([1,1,100,67,5]) 输出： array([0,0,3,2,1]) 1234567```python# OneHotEncoder 用于将表示分类的数据扩维：from sklearn.preprocessing import OneHotEncoderohe = OneHotEncoder()ohe.fit([[1],[2],[3],[4]])ohe.transform([2],[3],[1],[4]).toarray()输出：[ [0,1,0,0] , [0,0,1,0] , [1,0,0,0] ,[0,0,0,1] ] Pandas.drop([‘filename’, ‘length’],axis=1) , axis=1说明是纵坐标 Keras本身并不是一个框架，实际上它是一个位于其他Deep Learning框架之上的高级API。目前它支持TensorFlow、Theano和CNTK。 model.add(layers.Dense(256, activation='relu')) 全连接层 深度学习知识点# softmax分类器#输入每个类别的概率（区别与max函数–hard max） 交叉熵函数？# softmax反向传播求导形式很简单 Optimizer# momentum optimizer – 有惯性 减少震荡 RMSProp Dw÷一个很小的数，W方向变化加快；db÷一个很大的数，b方向变化减慢 Adam (adaptive moment estimation): combination of momentum optimizer and RMSprop Loss function# triplet loss","link":"/2020/10/22/music/"},{"title":"TCS","text":"文献管理与写作： Latex技巧： 直接写()而不是\\left \\right, 出来的是小括号 $$中的英文会变成斜体，如果想让它正常显示，需要\\textnormal latex句子间的间距&gt;词间间距，判断是句子结束的方法是‘. ’. 所以e.g. 后间距太大，需要e.g.\\ 如果不加\\qedhere，证毕□会出现在证明结束的下一行，而不是最后","link":"/2021/03/08/TCS/"}],"tags":[{"name":"music","slug":"music","link":"/tags/music/"},{"name":"CS","slug":"CS","link":"/tags/CS/"},{"name":"bash","slug":"bash","link":"/tags/bash/"},{"name":"python","slug":"python","link":"/tags/python/"},{"name":"spider","slug":"spider","link":"/tags/spider/"},{"name":"data mining","slug":"data-mining","link":"/tags/data-mining/"}],"categories":[]}